diff --git a/source/base/desktop/Open.java b/source/base/desktop/Open.java
index 1c68bf8..6ea6cbd 100755
--- a/source/base/desktop/Open.java
+++ b/source/base/desktop/Open.java
@@ -15,13 +15,13 @@ public class Open {
 	public static void file(Path path) {
 		try {
 			Desktop.getDesktop().open(path.file);
-		} catch (IOException e) { Mistake.ignore(e); } // Don't do anything if it doesn't work
+		} catch (IOException e) { Mistake.log(e); } // Don't do anything if it doesn't work
 	}
 
 	/** Open the given Web address in the user's default Web browser. */
 	public static void url(URI url) {
 		try {
 			Desktop.getDesktop().browse(url);
-		} catch (IOException e) { Mistake.ignore(e); } // Don't do anything if it doesn't work
+		} catch (IOException e) { Mistake.log(e); } // Don't do anything if it doesn't work
 	}
 }
diff --git a/source/base/file/File.java b/source/base/file/File.java
index 4c73add..4b83931 100755
--- a/source/base/file/File.java
+++ b/source/base/file/File.java
@@ -57,7 +57,7 @@ public class File extends Close {
 	/** Close our open connection to this file on the disk. */
 	public void close() {
 		if (already()) return;
-		try { file.close(); } catch (IOException e) { Mistake.ignore(e); } // Also closes file's FileChannel
+		try { file.close(); } catch (IOException e) { Mistake.log(e); } // Also closes file's FileChannel
 	}
 
 	/** Close and delete this file on the disk. */
diff --git a/source/base/internet/packet/ListenPacket.java b/source/base/internet/packet/ListenPacket.java
index e973b94..b030f70 100755
--- a/source/base/internet/packet/ListenPacket.java
+++ b/source/base/internet/packet/ListenPacket.java
@@ -37,6 +37,6 @@ public class ListenPacket extends Close {
 	/** Stop listening on port. */
 	@Override public void close() {
 		if (already()) return;
-		try { channel.close(); } catch (IOException e) { Mistake.ignore(e); }
+		try { channel.close(); } catch (IOException e) { Mistake.log(e); }
 	}
 }
diff --git a/source/base/internet/socket/ListenSocket.java b/source/base/internet/socket/ListenSocket.java
index d00e9f2..d946a71 100755
--- a/source/base/internet/socket/ListenSocket.java
+++ b/source/base/internet/socket/ListenSocket.java
@@ -35,6 +35,6 @@ public class ListenSocket extends Close {
 	/** Stop listening on port. */
 	@Override public void close() {
 		if (already()) return;
-		try { channel.close(); } catch (IOException e) { Mistake.ignore(e); }
+		try { channel.close(); } catch (IOException e) { Mistake.log(e); }
 	}
 }
diff --git a/source/base/internet/socket/Socket.java b/source/base/internet/socket/Socket.java
index 75fb340..636c18c 100755
--- a/source/base/internet/socket/Socket.java
+++ b/source/base/internet/socket/Socket.java
@@ -66,6 +66,6 @@ public class Socket extends Close {
 	/** Disconnect this TCP socket connection. */
 	@Override public void close() {
 		if (already()) return;
-		try { channel.close(); } catch (IOException e) { Mistake.ignore(e); }
+		try { channel.close(); } catch (IOException e) { Mistake.log(e); }
 	}
 }
diff --git a/source/base/internet/web/DomainTask.java b/source/base/internet/web/DomainTask.java
index 7d4bd0c..45b02bf 100755
--- a/source/base/internet/web/DomainTask.java
+++ b/source/base/internet/web/DomainTask.java
@@ -1,7 +1,9 @@
 package base.internet.web;
 
 import java.net.InetAddress;
+import java.net.UnknownHostException;
 
+import base.exception.NetException;
 import base.exception.ProgramException;
 import base.internet.name.Ip;
 import base.state.Close;
@@ -45,9 +47,15 @@ public class DomainTask extends Close {
 
 		// A separate thread will call this method
 		public void thread() throws Exception {
-
-			// Look up the domain name in DNS to get its IP address
-			taskIp = new Ip(InetAddress.getByName(site));
+			
+			try {
+				
+				
+				// Look up the domain name in DNS to get its IP address
+				taskIp = new Ip(InetAddress.getByName(site));
+				
+				
+			} catch (UnknownHostException e) { throw new NetException(e); }
 		}
 
 		// Once thread() above returns, the normal event thread calls this done() method
diff --git a/source/base/process/Alive.java b/source/base/process/Alive.java
index 5f86161..426deb2 100755
--- a/source/base/process/Alive.java
+++ b/source/base/process/Alive.java
@@ -13,7 +13,7 @@ public class Alive {
                     synchronized (o) {
                         o.wait();
                     }
-                } catch (InterruptedException ie) {}
+                } catch (InterruptedException e) { Mistake.ignore(e); }
             }
         };
         
diff --git a/source/base/process/Mistake.java b/source/base/process/Mistake.java
index 40a5e2e..dfa3eb2 100755
--- a/source/base/process/Mistake.java
+++ b/source/base/process/Mistake.java
@@ -8,9 +8,12 @@ import javax.swing.JOptionPane;
 import base.state.Close;
 
 public class Mistake {
+
+	/** Completely ignore e. */
+	public static void ignore(Exception e) {} // Do nothing
 	
-	/** Notice an exception that we can ignore, and let the program keep going. */
-	public static void ignore(Exception e) {
+	/** Log e, but let the program keep running. */
+	public static void log(Exception e) {
 		String title = "Mistake.ignore() caught an exception"; // Compose
 		String body = describe(e);
 		
@@ -18,7 +21,7 @@ public class Mistake {
 		send(title + "\n" + body);
 	}
 	
-	/** Show and report an exception code didn't catch, and terminate the Java process. */
+	/** Stop the program because of e. */
 	public static void stop(Exception e) {
 		String title = "Mistake.stop() caught an exception"; // Compose
 		String body = describe(e);
@@ -64,13 +67,13 @@ public class Mistake {
 	private static void send(String body) {
 		try {
 			//TODO
-		} catch (Exception e) {} // Ignore an exception and keep going
+		} catch (Exception e) { Mistake.ignore(e); } // Ignore an exception and keep going
 	}
 	
 	/** Show the error to the user. */
 	private static void show(String title, String body) {
 		try {
 			JOptionPane.showMessageDialog(null, body, title, JOptionPane.ERROR_MESSAGE);
-		} catch (Exception e) {} // Ignore an exception and keep going
+		} catch (Exception e) { Mistake.ignore(e); } // Ignore an exception and keep going
 	}
 }
diff --git a/source/base/state/Close.java b/source/base/state/Close.java
index 9c469b3..a39b113 100755
--- a/source/base/state/Close.java
+++ b/source/base/state/Close.java
@@ -61,7 +61,7 @@ public abstract class Close {
 	/** Close c ignoring null and exceptions. */
 	public static void close(Close c) {
 		if (c == null) return;
-		try { c.close(); } catch (Exception e) { Mistake.ignore(e); } // Keep going to close the next object
+		try { c.close(); } catch (Exception e) { Mistake.log(e); } // Keep going to close the next object
 	}
 
 	/** true if c is null. */
diff --git a/source/base/state/Model.java b/source/base/state/Model.java
index 96bc062..1c6fd65 100755
--- a/source/base/state/Model.java
+++ b/source/base/state/Model.java
@@ -45,8 +45,14 @@ public abstract class Model extends Close {
 	private class MyReceive implements Receive {
 		public void receive() {
 			if (closed()) return;
-			for (View view : views)
-				view.refresh(); // This Model has changed, tell all our views above
+			
+			try {
+				for (View view : views)
+					view.refresh(); // This Model has changed, tell all our views above
+				
+			} catch (Exception e) {
+				System.out.println("exception here " + e.toString());
+			}
 		}
 	}
 
diff --git a/source/base/state/Pulse.java b/source/base/state/Pulse.java
index 295476d..e94855e 100755
--- a/source/base/state/Pulse.java
+++ b/source/base/state/Pulse.java
@@ -40,7 +40,8 @@ public class Pulse extends Close {
 			try {
 				if (closed()) return;                  // Don't let a closed Pulse call receive()
 				receive.receive();                     // Call our given receive() method
-			} catch (Exception e) { Mistake.stop(e); } // Stop the program for an Exception we didn't expect
+			} catch (Exception e) {
+				Mistake.stop(e); } // Stop the program for an Exception we didn't expect
 		}
 	}
 }
diff --git a/source/base/state/Task.java b/source/base/state/Task.java
index 524c851..e184c94 100755
--- a/source/base/state/Task.java
+++ b/source/base/state/Task.java
@@ -33,9 +33,23 @@ public class Task extends Close {
 	// When the constructor makes thread above, thread calls the run() method here
 	private class ThreadRun implements Runnable {
 		public void run() {
-			try { body.thread(); } // Call the code we were given
-			catch (ProgramException e) { programException = e; } // A ProgramException we expect and save
-			catch (Exception e) { exception = e; } // An Exception isn't expected, and stops the program
+			
+			
+			try {
+				body.thread();
+			} // Call the code we were given
+			
+			catch (ProgramException e) {
+				System.out.println("caught program exception");
+				programException = e;
+			} // A ProgramException we expect and save
+			
+			catch (Exception e) {
+				System.out.println("caught exception");
+				exception = e;
+			} // An Exception isn't expected, and stops the program
+			
+			
 			SwingUtilities.invokeLater(new EventRun()); // We're done, send an event
 		} // When thread exits run(), it closes
 	}	
@@ -52,7 +66,9 @@ public class Task extends Close {
 				thread = null;                              // thread is done and exited, null our reference to it
 				close(me());                                // Mark this Task closed
 				body.done(programException);                // Call the given done() method giving it the ProgramException we got
-			} catch (Exception e) { Mistake.stop(e); }      // Stop the program for an Exception we didn't expect
+			} catch (Exception e) {
+				System.out.println("NOT HERE");
+				Mistake.stop(e); }      // Stop the program for an Exception we didn't expect
 		}
 	}
 	private final Task me() { return this; } // Give inner code a link to this outer object
diff --git a/source/pipe/center/Center.java b/source/pipe/center/Center.java
index 4739675..41b9f84 100755
--- a/source/pipe/center/Center.java
+++ b/source/pipe/center/Center.java
@@ -19,7 +19,7 @@ import base.state.Close;
 public class Center extends Close {
 
 	/** Domain name and port number of the central server. */
-	public static final String site = "bootcloud.info:9193";
+	public static final String site = "bootcloud.infoo:9193";
 
 	public static void main(String[] arguments) {
 		SwingUtilities.invokeLater(new Runnable() { // Have the normal Swing thread call this run() method
@@ -65,7 +65,7 @@ public class Center extends Close {
 					packetMachine.send(bin, packet.move.ipPort);
 				}
 
-			} catch (Exception e) { Mistake.ignore(e); } // Log and drop unknown packets
+			} catch (Exception e) { Mistake.log(e); } // Log and drop unknown packets
 		}
 	}
 }
diff --git a/source/pipe/core/here/Here.java b/source/pipe/core/here/Here.java
index 35eb53b..d253a22 100755
--- a/source/pipe/core/here/Here.java
+++ b/source/pipe/core/here/Here.java
@@ -61,7 +61,7 @@ public class Here extends Close {
 					model.changed();
 				}
 
-			} catch (ProgramException e) { exception = e; }
+			} catch (ProgramException e) { exception = e; model.changed(); }
 		}
 	}
 	
@@ -71,7 +71,14 @@ public class Here extends Close {
 	public boolean canRefresh() {
 		if (task == null) return true;
 		if (!done(task)) return false;
-		return task.age().expired(4 * Time.second);
+		
+		try {
+			return task.age().expired(4 * Time.second);
+			
+		} catch (ProgramException e) {
+			return true;
+		}
+		
 	}
 	
 	/** Send a UDP packet to the central server to find out what our Internet IP address is. */
@@ -86,18 +93,18 @@ public class Here extends Close {
 	// Look
 
 	/** Our internal IP address and listening port number on the LAN right now. */
-	public IpPort lan() {
+	public IpPort sayLan() {
 		try {
 			return new IpPort(new Ip(InetAddress.getLocalHost()), port);
 		} catch (UnknownHostException e) { throw new PlatformException(e); }
 	}
 
 	/** The most recent ProgramException that prevented us from finding out our Internet IP address. */
-	public ProgramException exception() { return exception; }
+	public ProgramException sayException() { return exception; }
 	/** The most recent valid Internet IP address we've determined we have, null if we don't know yet. */
-	public IpPort internet() { return internet; }
+	public IpPort sayInternet() { System.out.println("making it here?"); return internet; }
 	/** When we found internet(). */
-	public Now age() { return age; }
+	public Now sayAge() { return age; }
 	
 	// Model
 
@@ -106,15 +113,15 @@ public class Here extends Close {
 		
 		public boolean canRefresh() { return me().canRefresh(); }
 		
-		public String lan()      { return Describe.object((me().lan())); }
-		public String internet() { return Describe.object((me().internet())); }
+		public String lan()      { return Describe.object((me().sayLan())); }
+		public String internet() { return Describe.object((me().sayInternet())); }
 		
 		public String age() {
-			if (me().age() == null) return "";
-			return Describe.timeCoarse(me().age().age()) + " ago";
+			if (me().sayAge() == null) return "";
+			return Describe.timeCoarse(me().sayAge().age()) + " ago";
 		}
 		
-		public String exception() { return Describe.object((me().exception())); }
+		public String exception() { return Describe.object((me().sayException())); }
 	}
 	private Here me() { return this; } // Give the inner class a link to this outer object
 	
diff --git a/source/pipe/core/here/HereTask.java b/source/pipe/core/here/HereTask.java
index d4de22f..65be6e8 100755
--- a/source/pipe/core/here/HereTask.java
+++ b/source/pipe/core/here/HereTask.java
@@ -110,7 +110,7 @@ public class HereTask extends Close {
 					up.send();
 				}
 			}
-			catch (DataException e) { Mistake.ignore(e); }
+			catch (DataException e) { Mistake.log(e); }
 			catch (ProgramException e) { exception = e; close(me()); up.send(); }
 		}
 	}
diff --git a/source/pipe/user/InfoFrame.java b/source/pipe/user/InfoFrame.java
index 2856cfd..1fdf191 100755
--- a/source/pipe/user/InfoFrame.java
+++ b/source/pipe/user/InfoFrame.java
@@ -108,11 +108,17 @@ public class InfoFrame extends Close {
 
 		// The Model beneath changed, we need to update what we show the user
 		public void refresh() {
-			Refresh.can(refreshAction, program.core.here.model.canRefresh());
-			Refresh.text(lan.area, program.core.here.model.lan());
-			Refresh.text(internet.area, program.core.here.model.internet());
-			Refresh.text(age.area, program.core.here.model.age());
-			Refresh.text(exception.area, program.core.here.model.exception());
+			try {
+				
+				Refresh.can(refreshAction, program.core.here.model.canRefresh());
+				Refresh.text(lan.area, program.core.here.model.lan());
+				Refresh.text(internet.area, program.core.here.model.internet());
+				Refresh.text(age.area, program.core.here.model.age());
+				Refresh.text(exception.area, program.core.here.model.exception());
+				
+			} catch (Exception e) {
+				System.out.println("here it is in view: " + e.toString());
+			}
 		}
 
 		// The Model beneath closed, take this View off the screen
